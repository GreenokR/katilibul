using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    class Character
    {
        public string Name;
        public int Age;
        public string Gender;
        public string Profession;
        public string Hobby;
        public bool IsAlive = true;
        public bool IsKiller = false;

        public string Description =>
            $"{Name}, {Age} yaşında bir {Gender.ToLower()} ve mesleği {Profession.ToLower()}, hobisi ise {Hobby.ToLower()}.";

        public override string ToString()
        {
            return $"{Name}";
        }
    }

    static Random rnd = new Random();
    static string[] Names = { "Ali", "Ayşe", "Mehmet", "Zeynep", "Ahmet", "Elif", "Cem", "Seda", "Burak", "Derya" };
    static string[] Genders = { "Kadın", "Erkek" };
    static string[] Professions = { "Öğrenci", "Bahçıvan", "Şoför", "Şarkıcı", "Ev Sahibi", "Gazeteci", "Garson", "Barmen", "Aşçı" };
    static string[] Hobbies = { "Okçu", "Atlet", "Ateşli Silah Ustası", "Satranç", "Bulmaca Çözmek", "Yüzmek" };

    static void Main()
    {
        Console.WriteLine("🔎 Katili Bulma Oyunu Başladı!");

        var characters = GenerateCharacters(5);
        var killer = characters[rnd.Next(characters.Count)];
        killer.IsKiller = true;

        Console.WriteLine("\nŞüpheliler Tanıtılıyor:\n");

        foreach (var character in characters)
        {
            Console.WriteLine(character.Description);
        }

        int attempts = 3;
        while (attempts > 0)
        {
            Console.WriteLine($"\nTahmin et: Katil kim? ({attempts} hakkın kaldı)");
            Console.WriteLine("Hayatta olan karakterler:");
            foreach (var c in characters.Where(c => c.IsAlive))
            {
                Console.WriteLine($"- {c.Name}");
            }

            Console.Write("\nTahmin ettiğin ismi yaz: ");
            string guess = Console.ReadLine().Trim();

            var guessedCharacter = characters.FirstOrDefault(c => c.Name.Equals(guess, StringComparison.OrdinalIgnoreCase) && c.IsAlive);

            if (guessedCharacter == null)
            {
                Console.WriteLine("Geçersiz veya ölü bir karakter ismi girdiniz.");
                continue;
            }

            if (guessedCharacter.IsKiller)
            {
                Console.WriteLine($"\n🎉 Tebrikler! {guessedCharacter.Name} katildi. Oyunu kazandın!");
                return;
            }
            else
            {
                Console.WriteLine($"\n❌ Hayır, {guessedCharacter.Name} masumdu.");
                guessedCharacter.IsAlive = false;
                attempts--;

                // Eğer 1 kişi kalırsa (katil), oyun biter
                int aliveCount = characters.Count(c => c.IsAlive);
                if (aliveCount == 1)
                {
                    var lastAlive = characters.First(c => c.IsAlive);
                    Console.WriteLine($"\n☠️ Artık sadece katil olan {lastAlive.Name} hayatta kaldı...");
                    Console.WriteLine("💀 Katil kazandı. Oyunu kaybettin!");
                    return;
                }
            }
        }

        Console.WriteLine($"\n😢 3 tahmin hakkını da kullandın. Katil {killer.Name} idi!");
        Console.WriteLine("💀 Katil kazandı.");
    }

    static List<Character> GenerateCharacters(int count)
    {
        List<Character> characters = new List<Character>();
        List<string> usedNames = new List<string>();

        for (int i = 0; i < count; i++)
        {
            string name;
            do
            {
                name = Names[rnd.Next(Names.Length)];
            } while (usedNames.Contains(name));
            usedNames.Add(name);

            Character c = new Character
            {
                Name = name,
                Age = rnd.Next(20, 51),
                Gender = Genders[rnd.Next(Genders.Length)],
                Profession = Professions[rnd.Next(Professions.Length)],
                Hobby = Hobbies[rnd.Next(Hobbies.Length)]
            };
            characters.Add(c);
        }

        return characters;
    }
}
